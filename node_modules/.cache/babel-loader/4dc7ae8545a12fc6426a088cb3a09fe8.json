{"ast":null,"code":"var _jsxFileName = \"/Users/ikssss/Desktop/coding/inf_react/simpleTIL/src/OptimizeTest.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\"; // text가 변화되어야만 렌더링\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Textview = /*#__PURE__*/_s( /*#__PURE__*/React.memo(_c = _s(_ref => {\n  _s();\n\n  let {\n    text\n  } = _ref;\n  useEffect(() => console.log(`Update :: text : ${text}`));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, this);\n}, \"OD7bBpZva5O2jO+Puf00hKivP7c=\")), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c2 = Textview;\n\nconst Countview = _ref2 => {\n  _s2();\n\n  let {\n    count\n  } = _ref2;\n  useEffect(() => console.log(`Update :: count : ${count}`));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: count\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 10\n  }, this);\n};\n\n_s2(Countview, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c3 = Countview;\n\nconst OptimizeTest = () => {\n  _s3();\n\n  const [count, setCount] = useState(1);\n  const [text, setText] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 50\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"count\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Countview, {\n        count: count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setCount(count + 1);\n        },\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Textview, {\n        text: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: text,\n        onChange: e => setText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n_s3(OptimizeTest, \"dNtZfp4oyj4N/7iJZUhPAuJHtEE=\");\n\n_c4 = OptimizeTest;\nexport default OptimizeTest;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Textview$React.memo\");\n$RefreshReg$(_c2, \"Textview\");\n$RefreshReg$(_c3, \"Countview\");\n$RefreshReg$(_c4, \"OptimizeTest\");","map":{"version":3,"names":["React","useEffect","useState","Textview","memo","text","console","log","Countview","count","OptimizeTest","setCount","setText","padding","e","target","value"],"sources":["/Users/ikssss/Desktop/coding/inf_react/simpleTIL/src/OptimizeTest.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n// text가 변화되어야만 렌더링\nconst Textview = React.memo(({ text }) => {\n  useEffect(() => console.log(`Update :: text : ${text}`));\n  return <div>{text}</div>;\n});\n\nconst Countview = ({ count }) => {\n  useEffect(() => console.log(`Update :: count : ${count}`));\n  return <div>{count}</div>;\n};\n\nconst OptimizeTest = () => {\n  const [count, setCount] = useState(1);\n  const [text, setText] = useState(\"\");\n\n  return (\n    <div style={{ padding: 50 }}>\n      <div>\n        <h2>count</h2>\n        <Countview count={count} />\n        <button\n          onClick={() => {\n            setCount(count + 1);\n          }}\n        >\n          +\n        </button>\n      </div>\n\n      <div>\n        <h2>text</h2>\n        <Textview text={text} />\n        <input value={text} onChange={(e) => setText(e.target.value)} />\n      </div>\n    </div>\n  );\n};\n\nexport default OptimizeTest;\n"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CAEA;;;;AACA,MAAMC,QAAQ,iCAAGH,KAAK,CAACI,IAAN,SAAW,QAAc;EAAA;;EAAA,IAAb;IAAEC;EAAF,CAAa;EACxCJ,SAAS,CAAC,MAAMK,OAAO,CAACC,GAAR,CAAa,oBAAmBF,IAAK,EAArC,CAAP,CAAT;EACA,oBAAO;IAAA,UAAMA;EAAN;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CAHgB,kCAAH,iCAAd;;MAAMF,Q;;AAKN,MAAMK,SAAS,GAAG,SAAe;EAAA;;EAAA,IAAd;IAAEC;EAAF,CAAc;EAC/BR,SAAS,CAAC,MAAMK,OAAO,CAACC,GAAR,CAAa,qBAAoBE,KAAM,EAAvC,CAAP,CAAT;EACA,oBAAO;IAAA,UAAMA;EAAN;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CAHD;;IAAMD,S;;MAAAA,S;;AAKN,MAAME,YAAY,GAAG,MAAM;EAAA;;EACzB,MAAM,CAACD,KAAD,EAAQE,QAAR,IAAoBT,QAAQ,CAAC,CAAD,CAAlC;EACA,MAAM,CAACG,IAAD,EAAOO,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;EAEA,oBACE;IAAK,KAAK,EAAE;MAAEW,OAAO,EAAE;IAAX,CAAZ;IAAA,wBACE;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,SAAD;QAAW,KAAK,EAAEJ;MAAlB;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QACE,OAAO,EAAE,MAAM;UACbE,QAAQ,CAACF,KAAK,GAAG,CAAT,CAAR;QACD,CAHH;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAaE;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,QAAD;QAAU,IAAI,EAAEJ;MAAhB;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAO,KAAK,EAAEA,IAAd;QAAoB,QAAQ,EAAGS,CAAD,IAAOF,OAAO,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV;MAA5C;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QAbF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAqBD,CAzBD;;IAAMN,Y;;MAAAA,Y;AA2BN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}